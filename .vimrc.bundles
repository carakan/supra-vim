" Environment {
if &compatible
  set nocompatible
endif

set runtimepath+=~/.vim/bundle/repos/github.com/Shougo/dein.vim

if dein#load_state(expand('~/.vim/bundle'))
    call dein#begin(expand('~/.vim/bundle'))
    call dein#add('Shougo/dein.vim')


    call dein#add('tomtom/tlib_vim')
    " }

    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups=['general', 'writing', 'neocomplete', 'programming', 'php', 'ruby', 'python', 'javascript', 'html', 'misc',]
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_spf13_bundles = 1
    if !exists("g:override_spf13_bundles")

    " General {
        if count(g:spf13_bundle_groups, 'general')
            call dein#add('scrooloose/nerdtree')
            call dein#add('tpope/vim-surround')
            call dein#add('tpope/vim-repeat')
            call dein#add('rhysd/conflict-marker.vim')
            call dein#add('jiangmiao/auto-pairs')
            call dein#add('ctrlpvim/ctrlp.vim')
            call dein#add('tacahiroy/ctrlp-funky')
            call dein#add('terryma/vim-multiple-cursors')
            call dein#add('r901042004/matchit.zip')
            call dein#add('vim-airline/vim-airline')
            call dein#add('vim-airline/vim-airline-themes')
            call dein#add('bling/vim-bufferline')
            call dein#add('easymotion/vim-easymotion')
            call dein#add('jistr/vim-nerdtree-tabs')
            call dein#add('mbbill/undotree')
            call dein#add('nathanaelkane/vim-indent-guides')
            call dein#add('mhinz/vim-signify')
            call dein#add('tpope/vim-abolish.git')
            call dein#add('osyo-manga/vim-over')
            call dein#add('kana/vim-textobj-user')
            call dein#add('kana/vim-textobj-indent')
            call dein#add('gcmt/wildfire.vim')
            call dein#add('airblade/vim-rooter')
            call dein#add('benizi/vim-automkdir')
        endif
    " }

    " Writing {
        if count(g:spf13_bundle_groups, 'writing')
            call dein#add('reedes/vim-litecorrect')
            call dein#add('reedes/vim-textobj-sentence')
            call dein#add('reedes/vim-textobj-quote')
            call dein#add('reedes/vim-wordy')
        endif
    " }

    " General Programming {
        if count(g:spf13_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            "call dein#add('scrooloose/syntastic')
            call dein#add('tpope/vim-fugitive')
            call dein#add('mattn/webapi-vim')
            call dein#add('mattn/gist-vim')
            call dein#add('scrooloose/nerdcommenter')
            call dein#add('tpope/vim-commentary')
            call dein#add('godlygeek/tabular')
            if executable('ctags')
                call dein#add('majutsushi/tagbar')
            endif
        endif
    " }

    " Snippets & AutoComplete {
        "if count(g:spf13_bundle_groups, 'snipmate')
            "call dein#add('garbas/vim-snipmate')
            "call dein#add('honza/vim-snippets')
            "" Source support_function.vim to support vim-snippets.
            "if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
                "source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
            "endif
        "elseif count(g:spf13_bundle_groups, 'youcompleteme')
            "call dein#add('Valloric/YouCompleteMe')
            "call dein#add('SirVer/ultisnips')
            "call dein#add('honza/vim-snippets')
        "elseif count(g:spf13_bundle_groups, 'neocomplcache')
            "call dein#add('Shougo/neocomplcache')
            "call dein#add('Shougo/neosnippet')
            "call dein#add('Shougo/neosnippet-snippets')
            "call dein#add('honza/vim-snippets')
        "elseif count(g:spf13_bundle_groups, 'neocomplete')
            "call dein#add('Shougo/neocomplete.vim.git')
            "call dein#add('Shougo/neosnippet')
            "call dein#add('Shougo/neosnippet-snippets')
            call dein#add('honza/vim-snippets')
        "endif
    " }

    " PHP {
        if count(g:spf13_bundle_groups, 'php')
            call dein#add('spf13/PIV')
            call dein#add('arnaud-lb/vim-php-namespace')
            call dein#add('beyondwords/vim-twig')
        endif
    " }

    " Python {
        if count(g:spf13_bundle_groups, 'python')
            " Pick either python-mode or pyflakes & pydoc
            call dein#add('klen/python-mode')
            call dein#add('yssource/python.vim')
            call dein#add('python_match.vim')
            call dein#add('pythoncomplete')
        endif
    " }

    " Javascript {
        if count(g:spf13_bundle_groups, 'javascript')
            call dein#add('elzr/vim-json')
            call dein#add('groenewege/vim-less')
            call dein#add('pangloss/vim-javascript')
            call dein#add('briancollins/vim-jst')
        endif
    " }

    " Scala {
        if count(g:spf13_bundle_groups, 'scala')
            call dein#add('derekwyatt/vim-scala')
            call dein#add('derekwyatt/vim-sbt')
            call dein#add('xptemplate')
        endif
    " }

    " Haskell {
        if count(g:spf13_bundle_groups, 'haskell')
            call dein#add('travitch/hasksyn')
            call dein#add('dag/vim2hs')
            call dein#add('Twinside/vim-haskellConceal')
            call dein#add('Twinside/vim-haskellFold')
            call dein#add('lukerandall/haskellmode-vim')
            call dein#add('eagletmt/neco-ghc')
            call dein#add('eagletmt/ghcmod-vim')
            call dein#add('Shougo/vimproc.vim')
            call dein#add('adinapoli/cumino')
            call dein#add('bitc/vim-hdevtools')
        endif
    " }

    " HTML {
        if count(g:spf13_bundle_groups, 'html')
            call dein#add('hail2u/vim-css3-syntax')
            call dein#add('gorodinskiy/vim-coloresque')
            call dein#add('tpope/vim-haml')
            call dein#add('mattn/emmet-vim')
        endif
    " }

    " Ruby {
        if count(g:spf13_bundle_groups, 'ruby')
            call dein#add('tpope/vim-rails')
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
        endif
    " }

    " Puppet {
        if count(g:spf13_bundle_groups, 'puppet')
            call dein#add('rodjek/vim-puppet')
        endif
    " }

    " Go Lang {
        if count(g:spf13_bundle_groups, 'go')
            "call dein#add('Blackrush/vim-gocode'
            call dein#add('fatih/vim-go')
        endif
    " }

    " Elixir {
        if count(g:spf13_bundle_groups, 'elixir')
            call dein#add('elixir-lang/vim-elixir')
        endif
    " }

    " Misc {
        if count(g:spf13_bundle_groups, 'misc')
            call dein#add('tpope/vim-markdown')
            call dein#add('tpope/vim-cucumber')
        endif
    " }

    endif


    " Use fork bundles config if available {
        if filereadable(expand("~/.vimrc.bundles.fork"))
            source ~/.vimrc.bundles.fork
        endif
    " }

    " Use local bundles config if available {
        if filereadable(expand("~/.vimrc.bundles.local"))
            source ~/.vimrc.bundles.local
        endif
    " }


    call dein#end()
    call dein#save_state()
endif

filetype plugin indent on
syntax enable
